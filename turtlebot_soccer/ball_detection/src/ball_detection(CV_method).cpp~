#include <ros/ros.h>
#include <geometry_msgs/Twist.h>
#include <pcl_ros/point_cloud.h>
#include <pcl/point_types.h>
#include <sensor_msgs/Image.h>
#include <image_transport/image_transport.h>
#include <cv_bridge/cv_bridge.h>
#include <sensor_msgs/image_encodings.h>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <math.h>


static const std::string OPENCV_WINDOW = "Image window";
using namespace cv;
namespace ball_detection
{
typedef pcl::PointCloud<pcl::PointXYZ> PointCloud;

class BallDetector
{
	ros::NodeHandle nh;
	ros::Subscriber point_cloud_sub_;
	image_transport::ImageTransport it_;
	image_transport::Subscriber image_sub_;
	image_transport::Publisher image_pub_;

public:
  /*!
   * @brief The constructor for the follower.
   * Constructor for the follower.
   */
  BallDetector() :it_(nh)
{
   // Subscrive to input video feed and publish output video feed
   image_sub_ = it_.subscribe("/camera/depth/image", 1,
     &BallDetector::imageBallDetection, this);

   image_pub_ = it_.advertise("/image_converter/output_video", 1);
   cv::namedWindow(OPENCV_WINDOW);

 }

  ~BallDetector()
  {
	  cv::destroyWindow(OPENCV_WINDOW);
  }

  void depthToCV8UC1(cv::Mat& depth_img, cv::Mat& mono8_img){
	  //Process images
	  if(depth_img.type() == CV_32FC1){
	  depth_img.convertTo(mono8_img, CV_8UC1, 100,0); //milimeter (scale of mono8_img does not matter)
	}
	else if(depth_img.type() == CV_16UC1){
	  mono8_img = cv::Mat(depth_img.size(), CV_8UC1);
	  cv::Mat float_img;
	  depth_img.convertTo(mono8_img, CV_8UC1, 0.05, -25); //scale to 2cm
	  depth_img.convertTo(float_img, CV_32FC1, 0.001, 0);//From mm to m(scale of depth_img matters)
	  depth_img = float_img;
	}
  }

  void imageBallDetection(const sensor_msgs::ImageConstPtr& msg)
  {
	  cv_bridge::CvImagePtr cv_ptr;
	  try
	  {
		  cv_ptr = cv_bridge::toCvCopy(msg, sensor_msgs::image_encodings::TYPE_32FC1);
		  cv::Mat depth_float_img = cv_ptr->image;
		  cv::Mat depth_mono8_img;
		  // transfer to 8bit greyscale image
		  depthToCV8UC1(depth_float_img, depth_mono8_img);

		  vector<Vec3f> balls;
		  // smooth it, otherwise a lot of false circles may be detected
		  cv:: GaussianBlur(depth_mono8_img, depth_mono8_img, Size(9, 9), 2, 2 );
		  cv:: HoughCircles(depth_mono8_img, balls, CV_HOUGH_GRADIENT, 2, depth_mono8_img.rows/4, 1, 200 );

		  if (balls.size()>1)
		  {
			  ROS_INFO("circles detected!");
			  for (vector<Vec3f>::const_iterator i = balls.begin(); i != balls.end(); ++i)
			  {
				  Point3f points(*i);
				  // Draw an example circle on the video stream
				  if (depth_mono8_img.rows > 60 && depth_mono8_img.cols > 60)
					  cv::circle(depth_mono8_img, cv::Point(points.x, points.y), points.z, CV_RGB(255,0,0));
			  }
		  }
		  else
		  {
			  ROS_INFO("circles NOT detected!");
		  }

		  // Update GUI Window
		  cv::imshow(OPENCV_WINDOW, depth_mono8_img);
		  cv::waitKey(3);

		  // Output modified video stream
	  image_pub_.publish(cv_ptr->toImageMsg());

	  }
	  catch (cv_bridge::Exception& e)
	  {
		  ROS_ERROR("cv_bridge exception: %s", e.what());
		  return;
	  }
  }
};
}


int main(int argc, char** argv)
{
	ros::init(argc, argv, "ball_detection");
	ball_detection::BallDetector bd;
	ros::spin();
	return 0;
}
