#include <ros/ros.h>
#include <geometry_msgs/Twist.h>
#include <pcl_ros/point_cloud.h>
#include <pcl/ModelCoefficients.h>
#include <pcl_ros/io/pcd_io.h>
#include <pcl/point_types.h>
#include <pcl/sample_consensus/ransac.h>
#include <pcl/sample_consensus/sac_model_sphere.h>
#include <pcl/sample_consensus/method_types.h>
#include <pcl/sample_consensus/model_types.h>
#include <pcl_ros/segmentation/sac_segmentation.h>
#include <pcl/filters/extract_indices.h>
#include <math.h>
#include <visualization_msgs/Marker.h>
#include <visualization_msgs/MarkerArray.h>

namespace ball_detection {
typedef pcl::PointCloud<pcl::PointXYZ> PointCloud;

class BallDetector {
	ros::NodeHandle nh;
	//ros::Subscriber point_cloud_sub_;
	ros::Subscriber image_sub_;
	ros::Publisher markerpub_;

public:

	BallDetector() {
		/*point_cloud_sub_ =
				nh.subscribe < PointCloud
						> ("/camera/depth/points", 1, &BallDetector::imageBallDetectionPointCloud, this);
		*/
		image_sub_ =nh.subscribe < PointCloud> ("/camera/depth/points", 1, &BallDetector::imageBallDetectionPointCloud, this);

		markerpub_ = nh.advertise < visualization_msgs::MarkerArray
				> ("spheres_markers", 1);
	}

	~BallDetector() {

	}
	void imageBallDetectionPointCloud(const PointCloud::ConstPtr& cloud) {
		float depth_threshold = 2.0;
		pcl::PointCloud<pcl::PointXYZ>::Ptr final(
				new pcl::PointCloud<pcl::PointXYZ>);
		// populate our PointCloud with points
		final->width = cloud->width;
		final->height = cloud->height;
		final->is_dense = false;
		final->points.resize(cloud->width * cloud->height);
		for (size_t i = 0; i < cloud->points.size(); ++i) {
			if (cloud->points[i].z <= depth_threshold) {
				final->points[i].x = cloud->points[i].x;
				final->points[i].y = cloud->points[i].y;
				final->points[i].z = cloud->points[i].z;
			}
		}

		ROS_DEBUG("simplified pointcould finished");

		//1. Method, using only the pointcloud for ball detection
		pcl::ModelCoefficients::Ptr coefficients (new pcl::ModelCoefficients);
	    pcl::PointIndices::Ptr inliers (new pcl::PointIndices);
	    // Create the segmentation object
	    pcl::SACSegmentation<pcl::PointXYZ> seg;
	    // Optional
	    seg.setOptimizeCoefficients (true);
	    // Mandatory
	    seg.setModelType (pcl::SACMODEL_PLANE);
	    seg.setMethodType (pcl::SAC_RANSAC);
	    seg.setDistanceThreshold (0.01);
	    seg.setRadiusLimits(0.1, 0.15);
	    seg.setEpsAngle(15 / (180/3.141592654));
	    seg.setMaxIterations(1000000);

	    seg.setInputCloud (final);
        seg.segment (*inliers, *coefficients);

        std::cout<<"totally inliers = "<<inliers->indices.size ()<<std::endl;
		//publishMarker(inliers, final);

		 // calculate the center of the spheres
		 float x_sphere = 0;
		 float y_sphere = 0;
		 float z_sphere = 0;
		 float num_size = 0;
		 for (size_t i = 0; i < inliers->indices.size (); ++i)
		 {
			 if (final->points[inliers->indices[i]].x<0.01 && final->points[inliers->indices[i]].y<0.01 && final->points[inliers->indices[i]].z<0.01) {}
			 else
			 {
				 x_sphere = x_sphere + final->points[inliers->indices[i]].x;
				 y_sphere = y_sphere + final->points[inliers->indices[i]].y;
				 z_sphere = z_sphere + final->points[inliers->indices[i]].z;
				 num_size = num_size + 1;
			 }
		 }
		 x_sphere = x_sphere/num_size;
		 y_sphere = y_sphere/num_size;
		 z_sphere = z_sphere/num_size;
		 std::cout<<"the sphere center is x = "<<x_sphere<<" y = "<<y_sphere<<" z = "<<z_sphere<<std::endl;

	}



  void publishMarker(pcl::PointIndices::Ptr inliers, PointCloud::Ptr  cloud)
   {
	  visualization_msgs::MarkerArray marker_array;
	  for (size_t i = 0; i < inliers->indices.size (); ++i)
	  {
		  if (i%100 == 0)
		  {
			  visualization_msgs::Marker marker;
			  marker.header.frame_id = "/camera_depth_optical_frame";
			  marker.header.stamp = ros::Time();
			  marker.ns = "my_namespace";
			  marker.id = i;
			  marker.type = visualization_msgs::Marker::SPHERE;
			  marker.action = visualization_msgs::Marker::ADD;
			  marker.pose.position.x = cloud->points[inliers->indices[i]].x;
			  marker.pose.position.y = cloud->points[inliers->indices[i]].y;
			  marker.pose.position.z = cloud->points[inliers->indices[i]].z;
			  marker.pose.orientation.x = 0.0;
			  marker.pose.orientation.y = 0.0;
			  marker.pose.orientation.z = 0.0;
			  marker.pose.orientation.w = 1.0;
			  marker.scale.x = 0.01;
			  marker.scale.y = 0.01;
			  marker.scale.z = 0.01;
			  marker.color.a = 1.0;
			  marker.color.r = 0.0;
			  marker.color.g = 1.0;
			  marker.color.b = 0.0;
			  marker_array.markers.push_back(marker);
		  }
	  }
	  markerpub_.publish(marker_array);

    }


};
}



int main(int argc, char** argv)
{
	ros::init(argc, argv, "ball_detection");
	ball_detection::BallDetector bd;
	ros::spin();
	return 0;
}
